vic_cov_forecast
forecast_dt <- data.table(country_region="Victoria",
data="confirmed",
date=seq(from=vic_covid_data[data=="confirmed", max(date)]+days(1), by="day", length.out=30),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
vic_cov_forecast <- rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt), idcol=TRUE, fill=TRUE)
setnafill(vic_cov_forecast, "locf", cols=c("value", "population"))
setnafill(vic_cov_forecast, fill=1, cols=c("low_growth", "med_growth", "high_growth", "const_growth"))
vic_cov_forecast
iris %>% as.data.table()
iris %>% as.data.table() %>% .[species=="setosa",.SD]
iris %>% as.data.table() %>% .[Species=="setosa",.SD]
iris %>% as.data.table() %>% .[Species=="setosa",.SD*2,.SDcols=.(-Species)]
iris %>% as.data.table() %>% .[Species=="setosa",.SD*2,.SDcols=c(-Species)]
iris %>% as.data.table() %>% .[Species=="setosa",.SD*2,.SDcols=c(-"Species")]
iris %>% as.data.table() %>% .[Species=="setosa",.SD*2,.SDcols=patterns("Sepal")]
iris %>% as.data.table() %>% .[Species=="setosa",.SD,.SDcols=patterns("Sepal")]
vic_cov_forecast
# setnafill(vic_cov_forecast, fill=1, cols=c("low_growth", "med_growth", "high_growth", "const_growth"))
vic_cov_forecast[.id==2, c("low_forecast", "med_forecast", "high_forecast", "const_forecast") := value*.SD, .SDcols=patterns("growth$")]
vic_cov_forecast
vic_cov_forecast[.id==2,
c("low_forecast_per_cap", "med_forecast_per_cap", "high_forecast_per_cap", "const_forecast_per_cap") := .SD/population,
.SDcols=patterns("forecast$")]
vic_cov_forecast
vic_cov_forecast %>% view
vic_cov_forecast %>% View
runApp()
stat_smooth
geom_smooth
runApp()
?geom_ribbon
vic_cov_forecast
runApp()
vic_cov_forecast %>%
ggplot(aes(date, const_forecast_per_cap, ymin=low_forecast_per_cap, ymax=high_forecast_per_cap)) +
geom_line(aes(date, value_per_cap)) +
geom_line(aes(date, value_per_cap))
covid_data
covid_data[country_region=="Victoria"]
runApp()
vic_cov_forecast
vic_cov_forecast[,.(value_per_cap,const_forecast_per_cap)]
vic_cov_forecast[,.(value_per_cap,const_forecast_per_cap)] %>% View
vic_cov_forecast %>%
ggplot() +
geom_line(aes(date, value_per_cap)) +
geom_line(aes(date, const_forecast_per_cap), linetype="dotted") +
scale_x_date(breaks = scales::breaks_width("1 week", 2),
labels = scales::label_date_short())
runApp()
growth_quartiles
vic_cov_forecast
vic_cov_forecast$const_forecast
vic_cov_forecast$const_growth
vic_cov_forecast$low_growth
runApp()
runApp()
runApp()
runApp()
# save and import population data from world bank (2018)
wb_population_url = "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv"
# check if data file already exists, download if not
if (length(list.files(pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files)
}
# read to data.table and keep only country and 2018 population
population = fread(list.files(pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
countries_investigated = c("Victoria",
"Australia")
# save and import coronavirus data from Johns Hopkins University
corona_url = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip"
# check if the last downloaded data is from today, download new one if not
date = Sys.Date() %>% as.character()
if (!(date %in% str_sub(list.files(pattern="^COVID_19"), 10, -5))){
file = curl_download(corona_url, destfile = paste0("COVID_19_", date,".zip"))
data_files = zip_list(file) %>% .$filename %>% str_subset("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
unzip(file, data_files)
}
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
covid_deaths = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")[,data:="deaths"]
covid_recovered = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")[,data:="recovered"]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
setkey(covid_data, data)
# join to population data and drop NA
covid_data = na.omit(population[covid_data, on="country_region"])
covid_data[,value_per_cap := value/population] # get per cap values
vic_covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[`Province/State`=="Victoria" & `Country/Region`=="Australia"][,`:=`(Lat=NULL, Long=NULL, `Country/Region`=`Province/State`, `Province/State`=NULL)]
vic_covid_data = melt(vic_covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
vic_covid_data[,population:=6629870][,value_per_cap:=value/population] # hardcode vic population from ERP sep-2019
covid_data = rbind(vic_covid_data, covid_data)
most_recent_vic = vic_covid_data[,max(date)]
first_case_vic = vic_covid_data[data=="confirmed" & value>0, min(date)]
cov_growth <- copy(covid_data)[data=="confirmed"]
cov_growth[,end_dates := (value!=0|date==most_recent_vic)*1, by=country_region]
library(shiny)
library(shinyWidgets)
library(curl)
library(zip)
library(stringr)
library(ggplot2)
library(magrittr)
library(data.table)
library(ggthemes)
library(lubridate)
# save and import population data from world bank (2018)
wb_population_url = "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv"
# check if data file already exists, download if not
if (length(list.files(pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files)
}
# read to data.table and keep only country and 2018 population
population = fread(list.files(pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
countries_investigated = c("Victoria",
"Australia")
# save and import coronavirus data from Johns Hopkins University
corona_url = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip"
# check if the last downloaded data is from today, download new one if not
date = Sys.Date() %>% as.character()
if (!(date %in% str_sub(list.files(pattern="^COVID_19"), 10, -5))){
file = curl_download(corona_url, destfile = paste0("COVID_19_", date,".zip"))
data_files = zip_list(file) %>% .$filename %>% str_subset("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
unzip(file, data_files)
}
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
covid_deaths = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")[,data:="deaths"]
covid_recovered = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")[,data:="recovered"]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
setkey(covid_data, data)
# join to population data and drop NA
covid_data = na.omit(population[covid_data, on="country_region"])
covid_data[,value_per_cap := value/population] # get per cap values
vic_covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[`Province/State`=="Victoria" & `Country/Region`=="Australia"][,`:=`(Lat=NULL, Long=NULL, `Country/Region`=`Province/State`, `Province/State`=NULL)]
vic_covid_data = melt(vic_covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
vic_covid_data[,population:=6629870][,value_per_cap:=value/population] # hardcode vic population from ERP sep-2019
covid_data = rbind(vic_covid_data, covid_data)
most_recent_vic = vic_covid_data[,max(date)]
first_case_vic = vic_covid_data[data=="confirmed" & value>0, min(date)]
cov_growth <- copy(covid_data)[data=="confirmed"]
cov_growth[,end_dates := (value!=0|date==most_recent_vic)*1, by=country_region]
cov_growth[end_dates==1, end_dates := ifelse(date==min(date)|date==most_recent_vic, 1, 0), by=country_region]
cov_growth <- cov_growth[end_dates==1,
{
cagr=(max(value)/min(value))^(1/as.numeric(difftime(max(date), min(date), "days")))-1
.(cagr)
},
by=country_region]
growth_quartiles <- quantile(cov_growth$cagr)
forecast_dt <- data.table(country_region="Victoria",
data="confirmed",
date=seq(from=vic_covid_data[data=="confirmed", max(date)]+days(1), by="day", length.out=10),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
vic_cov_forecast <- rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt), idcol=TRUE, fill=TRUE)
setnafill(vic_cov_forecast, "locf", cols=c("value", "population"))
# setnafill(vic_cov_forecast, fill=1, cols=c("low_growth", "med_growth", "high_growth", "const_growth"))
vic_cov_forecast[.id==2,
c("low_forecast", "med_forecast", "high_forecast", "const_forecast") := value*.SD,
.SDcols=patterns("growth$")]
vic_cov_forecast[.id==2,
c("low_forecast_per_cap", "med_forecast_per_cap", "high_forecast_per_cap", "const_forecast_per_cap") := .SD/population,
.SDcols=patterns("forecast$")]
cov_growth
cov_growth %>% view
cov_growth %>% View
runApp()
runApp()
library(tidyverse)
library(fable)
library(feasts)
library(tsibble)
library(lubridate)
getwd()
library(tidyverse)
library(fable)
library(feasts)
library(tsibble)
library(lubridate)
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
covid_deaths = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")[,data:="deaths"]
covid_recovered = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")[,data:="recovered"]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
library(data.table)
library(tidyverse)
library(fable)
library(feasts)
library(tsibble)
library(lubridate)
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
covid_deaths = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")[,data:="deaths"]
covid_recovered = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")[,data:="recovered"]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
setkey(covid_data, data)
# join to population data and drop NA
covid_data = na.omit(population[covid_data, on="country_region"])
covid_data[,value_per_cap := value/population] # get per cap values
vic_covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[`Province/State`=="Victoria" & `Country/Region`=="Australia"][,`:=`(Lat=NULL, Long=NULL, `Country/Region`=`Province/State`, `Province/State`=NULL)]
vic_covid_data = melt(vic_covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
vic_covid_data[,population:=6629870][,value_per_cap:=value/population] # hardcode vic population from ERP sep-2019
covid_data = rbind(vic_covid_data, covid_data)
covid_data
covid_data = covid_data %>%
as_tsibble(key=c("country_region","data","date"))
?as_tsibble
covid_data = covid_data %>%
as_tsibble(key=c("country_region","data"), index="date")
covid_data
covid_data = covid_data %>%
as_tsibble(key=c(country_region, data), index="date")
covid_data
covid_data = covid_data %>%
as_tsibble(key=c(data, country_region), index="date")
covid_data
covid_data = covid_data %>%
as_tsibble(key=c(country_region, data), index=date)
fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
cases_arima = ARIMA(value),
percap_arima = ARIMA(value_per_cap)
)
cases_fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
cases_arima = ARIMA(value),
)
cases_fit
cases_fit %>% filter(country_region=="Victoria")
cases_fit %>% filter(country_region=="Victoria") %>% report()
cases_fit %>% filter(country_region=="Victoria") %>% forecast()
cases_fit %>% filter(country_region=="Victoria") %>% forecast() %>% autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed"))
percap_fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
percap_arima = ARIMA(value_per_cap)
)
covid_data$value_per_cap
covid_data$value_per_cap %>% summary()
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
covid_deaths = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")[,data:="deaths"]
covid_recovered = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")[,data:="recovered"]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
setkey(covid_data, data)
# join to population data and drop NA
covid_data = na.omit(population[covid_data, on="country_region"])
covid_data[,value_per_cap := value/population] # get per cap values
vic_covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[`Province/State`=="Victoria" & `Country/Region`=="Australia"][,`:=`(Lat=NULL, Long=NULL, `Country/Region`=`Province/State`, `Province/State`=NULL)]
vic_covid_data = melt(vic_covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
vic_covid_data[,population:=6629870][,value_per_cap:=value/population] # hardcode vic population from ERP sep-2019
covid_data %>% View
covid_data = rbind(vic_covid_data, covid_data)
covid_data
covid_data %>% filter(country_region=="Australia")
percap_fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
percap_arima = ARIMA(value_per_cap)
)
# Time series modelling ----
covid_data = covid_data %>%
as_tsibble(key=c(country_region, data), index=date)
percap_fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
percap_arima = ARIMA(value_per_cap)
)
percap_fit
percap_fit %>% filter(country_region=="Victoria")
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed"))
library(ggthemes)
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
geom_rangeframe() +
scale_x_date(name="Date", breaks=scales::breaks_width(5), labels=scales::label_date_short())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
geom_rangeframe()
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
geom_rangeframe() +
scale_x_date(name="Date", breaks=scales::breaks_width(5), labels=scales::label_date_short())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
geom_rangeframe() +
scale_x_date(name="Date", labels=scales::label_date_short())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
geom_rangeframe() +
scale_x_date(name="Date", breaks=scales::breaks_width("1 week"), labels=scales::label_date_short())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
geom_rangeframe() +
scale_x_date(name="Date", breaks=scales::breaks_width("1 week"), labels=scales::label_date_short()) +
scale_y_continuous(name="Share of Population", breaks=scales::breaks_extended(), labels=scales::label_percent())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("1 week"), labels=scales::label_date_short()) +
scale_y_continuous(name="Share of Population", breaks=scales::breaks_extended(), labels=scales::label_percent())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Share of Population", breaks=scales::breaks_extended(), labels=scales::label_percent())
cases_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_percent())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Share of Population", breaks=scales::breaks_extended(), labels=scales::label_percent())
cases_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_comma())
percap_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Share of Population", breaks=scales::breaks_extended(), labels=scales::label_percent())
cases_fit %>%
filter(country_region=="US") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_comma())
?forecast
cases_fit %>%
filter(country_region=="US") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="US", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_comma())
cases_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_comma())
?model
?fable::VAR
?fable::MEAN
?ARIMA
cases_fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
cases_arima = ARIMA(value),
cases_ets = ETS(value)
)
percap_fit <- covid_data %>%
filter(data=="confirmed") %>%
model(
percap_arima = ARIMA(value_per_cap),
percap_ets = ETS(value_per_cap)
)
cases_fit %>%
filter(country_region=="Victoria") %>%
forecast() %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_comma())
cases_fit %>%
filter(country_region=="Victoria") %>%
forecast(cases_arima) %>%
autoplot(filter(covid_data, country_region=="Victoria", data=="confirmed")) +
theme_tufte() +
scale_x_date(name="Date", breaks=scales::breaks_width("2 weeks"), labels=scales::label_date_short()) +
scale_y_continuous(name="Cases", breaks=scales::breaks_extended(), labels=scales::label_comma())
glance(cases_fit)
coef(cases_fit)
augment(cases_fit)
tidy(cases_fit)
glance(cases_fit)
?glance
gg_arma(cases_fit)
gg_arma(filter(cases_fit, str_detect(country_region,"^Au")))
filter(cases_fit, str_detect(country_region,"^Au"))
filter(cases_fit, str_detect(country_region,"^Au")) %>% report()
filter(cases_fit, str_detect(country_region,"^Au")) %>% tidy()
shiny::runApp()
library(shiny)
library(shinyWidgets)
library(curl)
library(zip)
library(stringr)
library(ggplot2)
library(magrittr)
library(data.table)
library(ggthemes)
library(lubridate)
# save and import population data from world bank (2018)
wb_population_url = "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv"
# check if data file already exists, download if not
if (length(list.files(pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files)
}
# read to data.table and keep only country and 2018 population
population = fread(list.files(pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
countries_investigated = c("Victoria",
"Australia")
# save and import coronavirus data from Johns Hopkins University
corona_url = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip"
# check if the last downloaded data is from today, download new one if not
date = Sys.Date() %>% as.character()
if (!(date %in% str_sub(list.files(pattern="^COVID_19"), 10, -5))){
file = curl_download(corona_url, destfile = paste0("COVID_19_", date,".zip"))
data_files = zip_list(file) %>% .$filename %>% str_subset("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
unzip(file, data_files)
}
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
runApp()
