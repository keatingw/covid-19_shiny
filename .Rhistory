if (length(list.files(pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files)
}
# read to data.table and keep only country and 2018 population
population = fread(list.files(pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
countries_investigated = c("Victoria",
"Australia")
# save and import coronavirus data from Johns Hopkins University
corona_url = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip"
# check if the last downloaded data is from today, download new one if not
date = Sys.Date() %>% as.character()
if (!(date %in% str_sub(list.files(pattern="^COVID_19"), 10, -5))){
file = curl_download(corona_url, destfile = paste0("COVID_19_", date,".zip"))
data_files = zip_list(file) %>% .$filename %>% str_subset("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
unzip(file, data_files)
}
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")[,data:="confirmed"]
runApp()
library(shiny)
library(shinyWidgets)
library(curl)
library(zip)
library(stringr)
library(ggplot2)
library(magrittr)
library(data.table)
library(ggthemes)
library(lubridate)
# save and import population data from world bank (2018)
wb_population_url = "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv"
# check if data file already exists, download if not
if (length(list.files(pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files)
}
# read to data.table and keep only country and 2018 population
population = fread(list.files(pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
countries_investigated = c("Victoria",
"Australia")
# save and import coronavirus data from Johns Hopkins University
corona_url = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip"
corona_confirmed = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"
corona_deaths = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv"
corona_recovered = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv"
# check if the last downloaded data is from today, download new one if not
date = Sys.Date() %>% as.character()
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,`:=`(data="confirmed", dl_date=Sys.Date())]
covid_deaths = fread(corona_deaths)[,`:=`(data="deaths", dl_date=Sys.Date())]
covid_recovered = fread(corona_recovered)[,`:=`(data="recovered", dl_date=Sys.Date())]
covid_recovered
covid_recovered
runApp()
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
covid_data
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,`:=`(data="confirmed", dl_date=Sys.Date())]
covid_deaths = fread(corona_deaths)[,`:=`(data="deaths", dl_date=Sys.Date())]
covid_recovered = fread(corona_recovered)[,`:=`(data="recovered", dl_date=Sys.Date())]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
covid_data
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,`:=`(data="confirmed", dl_date=Sys.Date())]
covid_deaths = fread(corona_deaths)[,`:=`(data="deaths", dl_date=Sys.Date())]
covid_recovered = fread(corona_recovered)[,`:=`(data="recovered", dl_date=Sys.Date())]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL, dl_date=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
setkey(covid_data, data)
runApp()
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,`:=`(data="confirmed", dl_date=Sys.Date())]
covid_deaths = fread(corona_deaths)[,`:=`(data="deaths", dl_date=Sys.Date())]
covid_recovered = fread(corona_recovered)[,`:=`(data="recovered", dl_date=Sys.Date())]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL, dl_date=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names()
covid_data
vic_covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[`Province/State`=="Victoria" & `Country/Region`=="Australia"][,`:=`(Lat=NULL, Long=NULL, `Country/Region`=`Province/State`, `Province/State`=NULL, dl_date=NULL)]
vic_covid_data = melt(vic_covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
vic_covid_data[,population:=6629870][,value_per_cap:=value/population] # hardcode vic population from ERP sep-2019
covid_data = rbind(vic_covid_data, covid_data)
most_recent_vic = vic_covid_data[,max(date)]
runApp()
runApp()
runApp()
corona_confirmed = curl_download("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")
runApp()
runApp()
runApp()
runApp()
x <- data.table(iris)
set(x, j=Sepal.Length,  value = 1)
set(x, j="Sepal.Length",  value = 1)
x
runApp()
runApp()
runApp()
library(anytime)
anydate("2010-10-10")
anydate("2010-10-10") %>% year()
?anydate
getTZ()
anytime:::getTZ()
runApp()
library(shiny)
library(shinyWidgets)
library(curl)
library(zip)
library(stringr)
library(ggplot2)
library(magrittr)
library(data.table)
library(ggthemes)
library(lubridate)
# source("T:/TIGR_EFP/REVENUE AND TAXATION/Tools/DTF Style Guides/DTF Tax and Gambling ggtheme.R")
# save and import population data from world bank (2018)
wb_population_url = "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv"
# check if data file already exists, download if not
if (length(list.files(pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files)
}
# read to data.table and keep only country and 2018 population
population = fread(list.files(pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
countries_investigated = c("Victoria",
"Australia")
# save and import coronavirus data from Johns Hopkins University
corona_url = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip"
corona_confirmed = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"
corona_deaths = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv"
corona_recovered = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv"
# check if the last downloaded data is from today, download new one if not
date = Sys.Date() %>% as.character()
# if (!(date %in% str_sub(list.files(pattern="^COVID_19"), 10, -5))){
#     file = curl_download(corona_url, destfile = paste0("COVID_19_", date,".zip"))
#     data_files = zip_list(file) %>% .$filename %>% str_subset("COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
#     unzip(file, data_files)
# }
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,`:=`(data="confirmed", dl_date=Sys.Date())]
covid_deaths = fread(corona_deaths)[,`:=`(data="deaths", dl_date=Sys.Date())]
covid_recovered = fread(corona_recovered)[,`:=`(data="recovered", dl_date=Sys.Date())]
# join datasets and drop latitude, longitude, and province/state data (only interested in nations, but can re-add Victoria)
covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[,`:=`(Lat=NULL, Long=NULL, `Province/State`=NULL, dl_date=NULL)]
# aggregate data by country
covid_data = covid_data[,lapply(.SD, sum), keyby=.(`Country/Region`, data)]
# melt to long form data, and convert dates to actual Date object
covid_data = melt(covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
setkey(covid_data, data)
# join to population data and drop NA
covid_data = na.omit(population[covid_data, on="country_region"])
covid_data[,value_per_cap := value/population] # get per cap values
vic_covid_data = rbindlist(list(covid_confirmed, covid_deaths, covid_recovered))[`Province/State`=="Victoria" & `Country/Region`=="Australia"][,`:=`(Lat=NULL, Long=NULL, `Country/Region`=`Province/State`, `Province/State`=NULL, dl_date=NULL)]
vic_covid_data = melt(vic_covid_data, c("Country/Region", "data"), variable.name = "date")[,date:=mdy(date)] %>%
janitor::clean_names() %>%
as.data.table()
vic_covid_data[,population:=6629870][,value_per_cap:=value/population] # hardcode vic population from ERP sep-2019
covid_data = rbind(vic_covid_data, covid_data)
covid_data[,date:=anydate(date)]
vic_covid_data[,date:=anydate(date)]
most_recent_vic = vic_covid_data[,max(date)]
first_case_vic = vic_covid_data[data=="confirmed" & value>0, min(date)]
cov_growth = copy(covid_data)[data=="confirmed"]
cov_growth[,end_dates := (value!=0|date==most_recent_vic)*1, by=country_region]
cov_growth[end_dates==1, end_dates := ifelse(date==min(date)|date==most_recent_vic, 1, 0), by=country_region]
cov_growth = cov_growth[end_dates==1,
{
cagr=(max(value)/min(value))^(1/as.numeric(difftime(max(date), min(date), "days")))-1
.(cagr)
},
by=country_region]
growth_quartiles = quantile(cov_growth$cagr)
most_recent_vic
most_recent_vic %>% class
most_recent_vic + 1
most_recent_vic + days(1)
runApp()
seq(from=most_recent_vic+1, by="day", length.out=10)
runApp()
ata.table(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=input$forecastlength),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
data.table(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=input$forecastlength),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
first_forecast=most_recent_vic+1
data.table(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=input$forecastlength),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
data.table(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=10),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
data.table(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=10),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
x <- data.table(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=10),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr])[,`:=`(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))]
x
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tibble(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=10),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr]) %>%
mutate(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))
forecast_dt <- tibble(country_region="Victoria",
data="confirmed",
date=seq(from=first_forecast, by="day", length.out=10),
low_growth = 1+growth_quartiles[2],
med_growth = 1+growth_quartiles[3],
high_growth = 1+growth_quartiles[4],
const_growth = 1+cov_growth[country_region=="Victoria",cagr]) %>%
mutate(low_growth=cumprod(low_growth),
med_growth=cumprod(med_growth),
high_growth=cumprod(high_growth),
const_growth=cumprod(const_growth))
rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt, idcol=TRUE, fill=TRUE) %>%
tidyr::fill(value, population) %>%
mutate(low_forecast = ifelse(.id==2, value*low_growth, NA),
med_forecast = ifelse(.id==2, value*med_growth, NA),
high_forecast = ifelse(.id==2, value*high_growth, NA),
const_forecast = ifelse(.id==2, value*const_growth, NA),
low_forecast_per_cap = ifelse(.id==2, value_per_cap*low_growth, NA),
med_forecast_per_cap = ifelse(.id==2, value_per_cap*med_growth, NA),
high_forecast_per_cap = ifelse(.id==2, value_per_cap*high_growth, NA),
const_forecast_per_cap = ifelse(.id==2, value_per_cap*const_growth, NA))})
rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt, idcol=TRUE, fill=TRUE) %>%
tidyr::fill(value, population) %>%
mutate(low_forecast = ifelse(.id==2, value*low_growth, NA),
med_forecast = ifelse(.id==2, value*med_growth, NA),
high_forecast = ifelse(.id==2, value*high_growth, NA),
const_forecast = ifelse(.id==2, value*const_growth, NA),
low_forecast_per_cap = ifelse(.id==2, value_per_cap*low_growth, NA),
med_forecast_per_cap = ifelse(.id==2, value_per_cap*med_growth, NA),
high_forecast_per_cap = ifelse(.id==2, value_per_cap*high_growth, NA),
const_forecast_per_cap = ifelse(.id==2, value_per_cap*const_growth, NA))
)
rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt), idcol=TRUE, fill=TRUE) %>%
tidyr::fill(value, population) %>%
mutate(low_forecast = ifelse(.id==2, value*low_growth, NA),
med_forecast = ifelse(.id==2, value*med_growth, NA),
high_forecast = ifelse(.id==2, value*high_growth, NA),
const_forecast = ifelse(.id==2, value*const_growth, NA),
low_forecast_per_cap = ifelse(.id==2, value_per_cap*low_growth, NA),
med_forecast_per_cap = ifelse(.id==2, value_per_cap*med_growth, NA),
high_forecast_per_cap = ifelse(.id==2, value_per_cap*high_growth, NA),
const_forecast_per_cap = ifelse(.id==2, value_per_cap*const_growth, NA))
rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt), idcol=TRUE, fill=TRUE) %>%
tidyr::fill(value, population) %>%
mutate(low_forecast = ifelse(.id==2, value*low_growth, NA),
med_forecast = ifelse(.id==2, value*med_growth, NA),
high_forecast = ifelse(.id==2, value*high_growth, NA),
const_forecast = ifelse(.id==2, value*const_growth, NA),
low_forecast_per_cap = ifelse(.id==2, value_per_cap*low_growth, NA),
med_forecast_per_cap = ifelse(.id==2, value_per_cap*med_growth, NA),
high_forecast_per_cap = ifelse(.id==2, value_per_cap*high_growth, NA),
const_forecast_per_cap = ifelse(.id==2, value_per_cap*const_growth, NA)) %>% view
vic_cov_forecast = rbindlist(list(vic_covid_data[data=="confirmed"], forecast_dt), idcol=TRUE, fill=TRUE) %>%
tidyr::fill(value, population) %>%
mutate(low_forecast = ifelse(.id==2, value*low_growth, NA),
med_forecast = ifelse(.id==2, value*med_growth, NA),
high_forecast = ifelse(.id==2, value*high_growth, NA),
const_forecast = ifelse(.id==2, value*const_growth, NA),
low_forecast_per_cap = low_forecast/population,
med_forecast_per_cap = med_forecast/population,
high_forecast_per_cap = high_forecast/population,
const_forecast_per_cap = const_forecast/population)
vic_cov_forecast
vic_cov_forecast %>% view
runApp()
library(anytime)
anytime("2010-01-01 5:00 PM")
anytime("2010-01-01 5:00:00 PM")
anytime("2010-01-01 05:00:00 PM")
?anytime
anytime("2010-05-05, 5:00:00 pm")
anytime("2010-05-05, 5:00:00 pm", asUTC=TRUE)
anytime("2010-05-05, 5:00:00 pm", tz="AEST")
anytime::getTZ()
anytime:::getTZ()
anytime("2010-05-05, 5:00:00 pm", tz="Australia/Sydney")
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,`:=`(data="confirmed", dl_date=Sys.Date())]
covid_confirmed
covid_confirmed
runApp()
corona_confirmed = curl_download("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv",
paste0(Sys.Date(),"_confirmedcases.csv"))
corona_confirmed
corona_confirmed = curl_download("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv",
paste0(Sys.Date(),"_confirmedcases.csv"))
corona_deaths = curl_download("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv",
paste0(Sys.Date(),"_deaths.csv"))
corona_recovered = curl_download("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv",
paste0(Sys.Date(),"_recovered.csv"))
# read in data on confirmed cases, deaths and recoveries
covid_confirmed = fread(corona_confirmed)[,data:="confirmed"]
covid_deaths = fread(corona_deaths)[,data:="deaths"]
covid_recovered = fread(corona_recovered)[,data:="recovered"]
covid_confirmed
corona_confirmed = curl_download("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv",
paste0("resources\\",Sys.Date(),"_confirmedcases.csv"))
# check if data file already exists, download if not
if (length(list.files("resources", pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files, exdir = "resources")
}
runApp()
runApp()
?unzip
runApp()
# save and import population data from world bank (2018)
wb_population_url = "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv"
# check if data file already exists, download if not
if (length(list.files("resources", pattern="^API_SP.POP.TOTL"))==0){
file = curl_download(wb_population_url, tempfile())
data_files = zip_list(file) %>% .$filename  %>% str_subset("^API_SP.POP.TOTL")
unzip(file, data_files, exdir = "resources")
}
# read to data.table and keep only country and 2018 population
population = fread(list.files("resources", pattern="^API_SP.POP.TOTL"), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
# read to data.table and keep only country and 2018 population
population = fread(list.files("resources", pattern="^API_SP.POP.TOTL", full.names=TRUE), skip = 4, header = TRUE)[,.(country_region=`Country Name`,population=`2018`)][,country_region:=ifelse(country_region=="United States", "US", country_region)]
runApp()
runApp()
runApp()
runApp()
population
is.na(population)
population[is.na(population)]
runApp()
?download.file
runApp()
length(list.files("data",as.character(Sys.Date())))
runApp()
runApp()
runApp()
?curl_download
runApp()
runApp()
library(lubridate)
library(fable)
library(feasts)
library(tsibble)
vic_covid_data
vic_covid_cases_tsibble <- vic_covid_data %>%
filter(country_region == "Victoria",
data == "confirmed") %>%
as_tsibble(key = country_region, index = date)
vic_covid_cases_tsibble
vic_covid_fit = vic_covid_cases_tsibble %>%
model(
cases_arima = ARIMA(value),
percap_arima = ARIMA(value_per_cap)
)
percap_fit_vic = vic_covid_cases_tsibble %>%
model(
percap_arima = ARIMA(value_per_cap)
)
percap_fit_vic
percap_fit_vic %>% forecast() %>% autoplot(vic_covid_cases_tsibble)
percap_fit_vic %>% forecast()
x =percap_fit_vic %>% forecast()
x$.distribution
x$.distribution[1]
x$.distribution[1] %>% class
runApp()
cases_fit_vic %>% forecast()
cases_fit_vic = vic_covid_cases_tsibble %>%
model(cases_arima = ARIMA(value))
cases_fit_vic = vic_covid_cases_tsibble %>%
model(cases_arima = ARIMA(value))
cases_fit_vic %>% forecast()
fabletools::augment(cases_fit_vic, vic_covid_cases_tsibble)
fabletools::augment(vic_covid_cases_tsibble)
fabletools::augment(vic_covid_cases_tsibble, vic_covid_cases_tsibble)
?augment
bind_rows(vic_covid_cases_tsibble, forecast(cases_fit_vic, h=forecast_int()), .id=".id") %>%
mutate(forecast_value = ifelse(.id==1, NA, value))
bind_rows(vic_covid_cases_tsibble, forecast(cases_fit_vic), .id=".id") %>%
mutate(forecast_value = ifelse(.id==1, NA, value))
bind_rows(vic_covid_cases_tsibble, forecast(cases_fit_vic), .id=".id")
x = bind_rows(vic_covid_cases_tsibble, forecast(cases_fit_vic), .id=".id")
x
cases_fit_vic %>% forecast()
runApp()
runApp()
runApp()
percap_fit_vic %>% forecast() %>% autoplot(vic_covid_cases_tsibble)
x <- percap_fit_vic %>% forecast() %>% autoplot(vic_covid_cases_tsibble)
x$data
x$data %>% view
x$layers
x$plot_env$data
x$labels
runApp()
runApp()
?forecast
percap_fit_vic %>%
forecast()
percap_fit_vic %>%
forecast() %>% bind_rows(as_tibble(vic_covid_cases_tsibble), .)
percap_fit_vic %>%
forecast() %>% bind_rows(as_tibble(vic_covid_cases_tsibble), .) %>% view
percap_fit_vic %>%
forecast() %>% bind_rows(as_tibble(vic_covid_cases_tsibble), ., .id=".id") %>% view
cases_fit_vic %>%
forecast() %>% bind_rows(as_tibble(vic_covid_cases_tsibble), ., .id=".id") %>% view
x=cases_fit_vic %>%
forecast() %>% bind_rows(as_tibble(vic_covid_cases_tsibble), ., .id=".id")
x
x$.distribution
x$.distribution[[74]]
x$.distribution[[74]]$mean
pnorm(1)
pnorm(0)
pnorm(0,mean=1026.1,sd=245.65)
pnorm(0.5,mean=1026.1,sd=245.65)
qnorm(0.5,mean=1026.1,sd=245.65)
pnorm(0.05,mean=1026.1,sd=245.65)
pnorm(0.95,mean=1026.1,sd=245.65)
?pnorm
qnorm(0.95,mean=1026.1,sd=245.65)
qnorm(0.05,mean=1026.1,sd=245.65)
runApp()
runApp()
runApp()
